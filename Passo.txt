Instala tudo com:

earthengine authenticate
earthengine set_project [tesr-473014]

Olink para o projecto;: https://console.cloud.google.com/

    Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass
    & ".venv\Scripts\Activate.ps1"

python -m venv venv
# linux/macos:
source venv/bin/activate
# windows:
# venv\Scripts\activate

pip install -r requirements.txt


Nota: Se não quiseres instalar tudo de uma vez (alguns pacotes grandes), instala apenas o básico para começar:

pip install fastapi uvicorn numpy pandas scipy statsmodels python-multipart joblib


E instala earthengine-api somente quando for usar GEE.

3) Como rodar (passo-a-passo)

Salva bloom_backend.py e requirements.txt.

Cria e ativa virtualenv e instala dependências (ver acima).

(Opcional/recomendado) Autentica Earth Engine:

pip install earthengine-api

earthengine authenticate

earthengine init

Executa:

uvicorn bloom_backend:app --reload --port 8000


Testa health:

curl http://127.0.0.1:8000/health

4) Exemplos de uso (curl)

Analisar ponto (requer EE configurado):

curl -X POST "http://127.0.0.1:8000/analyze" -H "Content-Type: application/json" -d '{
  "lon": -13.234,
  "lat": 8.826,
  "start": "2024-01-01",
  "end": "2025-09-01",
  "buffer_km": 3,
  "sensors": ["landsat","viirs","modis"],
  "z_threshold": 2.0,
  "min_duration_days": 3
}'


Pedir séries (gera CSVs em data/processed):

curl -X POST "http://127.0.0.1:8000/timeseries" -H "Content-Type: application/json" -d '{
  "lon": -13.234, "lat": 8.826, "start": "2024-01-01", "end": "2025-09-01", "buffer_km": 2, "sensors": ["modis","viirs"]
}'


Preparar features para treino:

curl -X POST "http://127.0.0.1:8000/prepare_training" -H "Content-Type: application/json" -d '{
  "lon": -13.234, "lat": 8.826, "start": "2023-01-01", "end": "2025-08-01", "buffer_km": 3, "sensors": ["landsat","modis","viirs"]
}'


Upload modelo (multipart/form-data):

curl -X POST "http://127.0.0.1:8000/upload_model" -F "file=@/path/to/your_model.joblib"


Fazer predição (exemplo features JSON — deve corresponder ao que o teu modelo espera):

curl -X POST "http://127.0.0.1:8000/predict" -H "Content-Type: application/json" -d '{
  "features": {
    "landsat_NDVI_rolling7_mean": [0.12, 0.34],
    "viirs_NDVI_rolling7_mean": [0.10, 0.30]
  }
}'


Match espectral (upload dos arquivos .npz/.npy/.csv):

curl -X POST "http://127.0.0.1:8000/match_spectra" -F "hypercube=@/path/hyper.npz" -F "ref_spectra=@/path/ref.npz"

5) Como integrar ao frontend (arquitetura rápida)

O frontend (React/Leaflet) faz chamadas para:

/analyze para obter eventos e nomes de ficheiros CSV (para apresentação e download).

/timeseries para pedir timeseries e exibir gráfico (usar plotly/d3).

/download/{filename} para baixar CSV/parquet e mostrar.

/upload_model para subir o modelo (se o treino for feito localmente).

/predict para chamar o modelo no backend e obter resultados (probabilidades/labels).

Recomendação: para map visuals use Leaflet ou Mapbox GL e faça uma fetch para /analyze quando o utilizador clicar num ponto no mapa.


Como criar uma conta no google cloud